#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <thread.h>
#include <curthread.h>
#include <addrspace.h>
#include <vm.h>
#include <machine/spl.h>
#include <machine/tlb.h>

/*
 * Note! If OPT_DUMBVM is set, as is the case until you start the VM
 * assignment, this file is not compiled or linked or in any way
 * used. The cheesy hack versions in dumbvm.c are used instead.
 */


struct addrspace *
as_create(void)
{
	//kprintf("does as ever print?\n");
	struct addrspace *as = kmalloc(sizeof(struct addrspace));
	if (as==NULL) {
		return NULL;
	}
	as->as_vbase1 = 0;
	as->as_pbase1 = 0;
	as->as_npages1 = 0;
	as->as_vbase2 = 0;
	as->as_pbase2 = 0;
	as->as_npages2 = 0;
	as->as_stackpbase = 0;
	as->heapstart = 0;

	return as;
}

void
as_destroy(struct addrspace *as)
{ 	
	kfree(PADDR_TO_KVADDR(as->as_pbase1));
	kfree(PADDR_TO_KVADDR(as->as_pbase2));
	kfree(PADDR_TO_KVADDR(as->as_stackpbase));
	kfree(as);
}

void
as_activate(struct addrspace *as)
{
	int i, spl;

	(void)as;

	spl = splhigh();

	for (i=0; i<NUM_TLB; i++) {
		TLB_Write(TLBHI_INVALID(i), TLBLO_INVALID(), i);
	}

	splx(spl);
}

int
as_define_region(struct addrspace *as, vaddr_t vaddr, size_t sz,
		 int readable, int writeable, int executable, int i)
{
/*
	size_t npages; 
	
	sz += vaddr & ~(vaddr_t)PAGE_FRAME;
	vaddr &= PAGE_FRAME;


	sz = (sz + PAGE_SIZE - 1) & PAGE_FRAME;

	npages = sz / PAGE_SIZE;

	//kprintf("as define region npages is %d\n",npages);
	(void)readable;
	(void)writeable;
	(void)executable;

	if (as->as_vbase1 == 0) {
		as->as_vbase1 = vaddr;
		as->as_npages1 = npages;
		return 0;
	}

	if (as->as_vbase2 == 0) {
		as->as_vbase2 = vaddr;
		as->as_npages2 = npages;
		return 0;
	}

	kprintf("dumbvm: Warning: too many regions\n");
	return EUNIMP;
*/

size_t newsz;
	
	newsz=(sz+(vaddr & (~(vaddr_t)PAGE_FRAME))+4096-1);
	newsz=newsz&PAGE_FRAME;  // new siz without the shift
	
	if (i==0)
	{
		as->as_npages1=newsz>>12;   //shift it to get page number or could do sz/pagesize 
		kprintf("npages1 is %d\n",as->as_npages1);
		as->as_vbase1=(vaddr&PAGE_FRAME);
		kprintf("vbase1 is %x\n",as->as_vbase1);
		 if (as->heapstart < ((vaddr & PAGE_FRAME) + newsz)) 
			{
            		as->heapstart = (vaddr & PAGE_FRAME) + newsz;
			as->heapend = as->heapstart;
			kprintf("heapstart1 is %x\n",as->heapstart);
			kprintf("heapend1 is %x\n",as->heapend);
			assert((as->heapstart & PAGE_FRAME) == as->heapstart);
        		}
		return 0;
	}
	
	else if (i==1)
	{
		as->as_npages2=newsz>>12;
		kprintf("npages2 is %d\n",as->as_npages2);
		as->as_vbase2=(vaddr&PAGE_FRAME);
		kprintf("vbase2 is %x\n",as->as_vbase2);
		 if (as->heapstart < ((vaddr & PAGE_FRAME) + newsz)) 
			{
            		as->heapstart = (vaddr & PAGE_FRAME) + newsz;
<<<<<<< .mine
			as->heapend = as->heapstart;
			kprintf("heapstart1 is %x\n",as->heapstart);
=======
			as->heapend = as->heapstart;
			kprintf("heapstart2 is %x\n",as->heapstart);
			kprintf("heapend2 is %x\n",as->heapend);
>>>>>>> .r24
			assert((as->heapstart & PAGE_FRAME) == as->heapstart);
        		}
		return 0;
	}
	else
	return EUNIMP;
}

int
as_prepare_load(struct addrspace *as)
{
	assert(as->as_pbase1 == 0);
	assert(as->as_pbase2 == 0);
	assert(as->as_stackpbase == 0);
	int spl;
	spl=splhigh();
	as->as_pbase1 = alloc_kpages(as->as_npages1)-MIPS_KSEG0;
	if (as->as_pbase1 == 0) {
		return ENOMEM;
	}
	as->as_pbase2 = alloc_kpages(as->as_npages2)-MIPS_KSEG0;
	if (as->as_pbase2 == 0) {
		return ENOMEM;
	}
	as->as_stackpbase = alloc_kpages(DUMBVM_STACKPAGES)-MIPS_KSEG0;
	if (as->as_stackpbase == 0) {
		return ENOMEM;
	}		
	splx(spl);
	return 0;
}

int
as_complete_load(struct addrspace *as)
{
	(void)as;
	return 0;
}

int
as_define_stack(struct addrspace *as, vaddr_t *stackptr)
{
	assert(as->as_stackpbase != 0);
  as->as_stackpbase = USERSTACK; // Tim added this
	*stackptr = USERSTACK;
	return 0;
}

int
as_copy(struct addrspace *old, struct addrspace **ret)
{
	struct addrspace *new;

	new = as_create();
	if (new==NULL) {
		return ENOMEM;
	}

	new->as_vbase1 = old->as_vbase1;
	new->as_npages1 = old->as_npages1;
	new->as_vbase2 = old->as_vbase2;
	new->as_npages2 = old->as_npages2;

	if (as_prepare_load(new)) {
		as_destroy(new);
		return ENOMEM;
	}

	assert(new->as_pbase1 != 0);
	assert(new->as_pbase2 != 0);
	assert(new->as_stackpbase != 0);

	memmove((void *)PADDR_TO_KVADDR(new->as_pbase1),
		(const void *)PADDR_TO_KVADDR(old->as_pbase1),
		old->as_npages1*PAGE_SIZE);

	memmove((void *)PADDR_TO_KVADDR(new->as_pbase2),
		(const void *)PADDR_TO_KVADDR(old->as_pbase2),
		old->as_npages2*PAGE_SIZE);

	memmove((void *)PADDR_TO_KVADDR(new->as_stackpbase),
		(const void *)PADDR_TO_KVADDR(old->as_stackpbase),
		DUMBVM_STACKPAGES*PAGE_SIZE);
	
	*ret = new;
	return 0;
}

